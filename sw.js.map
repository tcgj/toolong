{"version":3,"file":"sw.js","mappings":"uBAAiBA,ECEjB,aAGE,WAAoBC,GAAA,KAAAA,gBAAAA,EAFZ,KAAAC,WAAa,IAAIC,GAE6B,CAyBxD,OAvBQ,YAAAC,OAAN,SAAaC,G,wmCAGX,OAFMC,EAAUC,KAAKC,IAAIH,EAAO,KAMzB,CAAP,EAAOC,EAAQF,OAAOC,EAAOI,MAAM,KAH1B,CAAP,EAAOF,KAAKN,gBAAgBG,OAAOC,G,qSAMvC,YAAAG,IAAA,SAAIE,GACF,OAAOH,KAAKL,WAAWM,IAAIE,EAC7B,EAEA,YAAAC,IAAA,SAAID,EAAuBJ,GAEzB,OADAC,KAAKL,WAAWU,IAAIF,EAAeJ,GAC5BC,IACT,EAEA,YAAAM,YAAA,SAAYP,GAEV,OADAC,KAAKN,gBAAkBK,EAChBC,IACT,EACF,EA5BA,IDFA,SAAiBP,GAKf,SAAgBc,EAAqBT,EAAkBU,GACrD,YADqD,IAAAA,IAAAA,EAAA,KAC9CC,mBAAmBX,EAAOY,KAAKF,GACxC,CAEA,SAAgBG,EAAcC,EAAkBC,GAC9C,IAAMC,EAAaC,OAAOC,QAAQH,GAClC,OAAKC,EAAWG,OAGT,UAAGL,GAAQ,OAAG,WAAIE,EAAWI,KAAI,SAAC,G,IAACC,EAAG,KAAEC,EAAK,KAAM,gBAAGD,EAAG,YAAIC,EAAV,IAAmBV,KAAK,OAFzEE,CAGX,CAdgB,EAAAS,SAAhB,SAAyBD,EAAeZ,GACtC,YADsC,IAAAA,IAAAA,EAAA,KAC/BY,EAAME,MAAMd,GAAWe,QAAO,SAACC,GAAM,OAAAA,CAAA,GAC9C,EAEgB,EAAAjB,qBAAoB,EAIpB,EAAAI,cAAa,EAQb,EAAAc,oBAAhB,SAAoCb,EAAkBc,EAAmB5B,G,MACvE,OAAOa,EAAcC,IAAQ,MAAKc,GAAYnB,EAAqBT,GAAO,GAC5E,EAEgB,EAAA6B,qBAAhB,SAAqCC,GACnC,OAAOC,SAASC,SAASF,EAAK,IAChC,CACD,CAxBD,CAAiBnC,IAAAA,EAAK,K,i1CEMhBsC,EAA8C,CAClDlC,OAAQ,SAAOC,GAAM,0C,mCAGnB,OAFMkC,EAAevC,EAAMc,qBAAqBT,EAAQ,KAClDmC,EAAY,4CAAqCD,GAChD,CAAP,EAAOvC,EAAMkC,qBAAqBM,G,SAIhCC,EAAsC,CAC1CrC,OAAQ,SAAOC,GAAM,0C,iCAEnB,OADMmC,EAAYxC,EAAMgC,oBAAoB,2BAA4B,KAAM3B,GACvE,CAAP,EAAOL,EAAMkC,qBAAqBM,G,SAIhCE,EAAsC,CAC1CtC,OAAQ,SAAOC,GAAM,0C,mCAGnB,OAFMkC,EAAevC,EAAMc,qBAAqBT,GAC1CmC,EAAY,mCAA4BD,GACvC,CAAP,EAAOvC,EAAMkC,qBAAqBM,G,SAIzBG,EAA2B,IAAIC,EAASN,GAClD3B,IAAI,KAAM2B,GACV3B,IAAI,MAAO8B,GACX9B,IAAI,KAAM+B,GC3BAG,EAA2C,CACtDzC,OAAQ,SAAOC,GAAM,O,OAAA,E,OAAA,E,EAAA,W,okCAEnB,OADMmC,EAAYxC,EAAMgC,oBAAoB,6BAA8B,IAAK3B,GACxE,CAAP,EAAOL,EAAMkC,qBAAqBM,G,iBAFf,K,6lDCAjBM,EAAkB,4BAUxB,SAAeC,EAAwBC,EAAkB3C,G,8GACvD,OAAsB,IAAlBA,EAAOmB,QACH,EAAYxB,EAAMkB,cAAc4B,EAAiB,CAAEG,KAAMD,IACxD,CAAP,EAAOhD,EAAMkC,qBAAqB,MAG9BM,EAAYxC,EAAMgC,oBAAoB,UAflB,gCAewC,YAAIgB,GAAY,IAAK3C,GACtE,GAAM6C,MAAMV,K,cAAvBW,EAAW,UACHC,GAAV,MACW,GAAMD,EAASE,Q,OAC5B,OADMC,EAAO,SACN,CAAP,EAAO,IAAIlB,SAAS,WAAIe,EAASI,QAAM,OAAsB,QAAnB,EAAAJ,EAASK,kBAAU,QAAI,WAAIL,EAASK,YAAY,yBAAiBF,GAAQ,CACjHC,OAAQ,O,OAIM,SAAMJ,EAASM,Q,OACjC,OAAqB,KADbC,EAAU,SAAqB,OAC7BlC,OACD,CAAP,EAAO,IAAIY,SAAS,aAAMY,EAAQ,kCAA0B3C,EAAOY,KAAK,KAAI,KAAK,CAAEsC,OAAQ,OAGtF,CAAP,EAAOvD,EAAMkC,qBAAqBwB,EAAM,GAAGC,W,OAGtC,IAAMC,EAAuB,IAAIhB,EA9BK,CAC3CxC,OAAQ,SAAOC,GAAM,0C,iCAEnB,OADMmC,EAAYxC,EAAMgC,oBAAoBc,EAAiB,IAAKzC,GAC3D,CAAP,EAAOL,EAAMkC,qBAAqBM,G,UA4BnC7B,IAAI,IAAK,CAAEP,OAAQ,SAACC,GAAW,OAAA0C,EAAwB,eAAgB1C,EAAxC,IAC/BM,IAAI,IAAK,CAAEP,OAAQ,SAACC,GAAW,OAAA0C,EAAwB,QAAS1C,EAAjC,ICpCrBwD,EAAuC,CAClDzD,OAAQ,SAAOC,GAAM,O,OAAA,E,OAAA,E,EAAA,W,okCAEnB,OADMmC,EAAYxC,EAAMgC,oBAAoB,gCAAiC,IAAK3B,GAC3E,CAAP,EAAOL,EAAMkC,qBAAqBM,G,iBAFf,K,gRCDVsB,EAA8C,CACzD1D,OAAQ,SAAOC,GAAM,O,OAAA,E,OAAA,E,EAAA,W,okCAEnB,OADMmC,EAAYxC,EAAMgC,oBAAoB,mCAAoC,IAAK3B,GAC9E,CAAP,EAAOL,EAAMkC,qBAAqBM,G,iBAFf,K,gRCDVuB,EAAwC,CACnD3D,OAAQ,SAAOC,GAAM,O,OAAA,E,OAAA,E,EAAA,W,okCAEnB,OADMmC,EAAYxC,EAAMgC,oBAAoB,kCAAmC,eAAgB3B,GACxF,CAAP,EAAOL,EAAMkC,qBAAqBM,G,iBAFf,K,gRCMjBwB,EAAW,IAAIpB,EAASC,GAC3BlC,ILVsC,IKUPkC,GAC/BlC,IHXgC,KGWPkD,GACzBlD,IJXgC,KIWPiD,GACzBjD,IDbiC,KCaPoD,GAC1BpD,IFdwC,KEcPmD,GACjCnD,INdoC,OMcPgC,GAqBhCsB,KAAKC,iBAAiB,WAAW,WAC/BD,KAAKE,aACP,IAEAF,KAAKC,iBAAiB,YAAY,SAACE,GACjCA,EAAMC,UACJJ,KAAKK,QACFC,QACAC,MAAK,WAEJ,OAAOP,KAAKK,QAAQG,SAAS,CAAExB,KAAM,UACvC,IACCuB,MAAK,SAACF,GACL,OAAOA,EAAQ7C,KAAI,SAACiD,GAElB,GAAI,aAAcA,EAChB,OAAOA,EAAOC,SAASD,EAAOvC,IAElC,GACF,IAEN,IAEA8B,KAAKC,iBAAiB,SAAS,SAACE,GAG9B,GAA4B,mBAAxBA,EAAMQ,QAAQC,OAAqD,gBAAvBT,EAAMQ,QAAQE,KAA9D,CAIA,IAAM3C,EAAM,IAAI4C,IAAIX,EAAMQ,QAAQzC,KAC5BI,EAAeJ,EAAIf,aAAaZ,IAAI,UAC1C,GAAoB,MAAhB+B,EAAJ,CAIA,IAAMyC,EAAW7C,EAAIf,aAAaZ,IAAI,YAClCwE,GAlDN,SAAkCC,GAChC,OAAQA,GACN,IAAK,SACHjB,EAASnD,YAAYgD,GACrB,MACF,IAAK,aACHG,EAASnD,YAAYgC,GAK3B,CAwCIqC,CAAyBF,GAG3BZ,EAAMe,YA5DR,SAAiC5C,G,wmCAG/B,OAFMlC,EAASL,EAAM4B,SAASW,GAEvB,CAAP,EAAOyB,EAAS5D,OAAOC,G,oSAyDL+E,CAAkB7C,G,EACtC,G","sources":["webpack://toolong/./src/util.ts","webpack://toolong/./src/commands/commands.ts","webpack://toolong/./src/commands/dictionary.ts","webpack://toolong/./src/commands/duckduckgo.ts","webpack://toolong/./src/commands/github.ts","webpack://toolong/./src/commands/google.ts","webpack://toolong/./src/commands/stackoverflow.ts","webpack://toolong/./src/commands/youtube.ts","webpack://toolong/./src/index.ts"],"sourcesContent":["export namespace Utils {\n  export function tokenize(value: string, delimiter: string = ' '): string[] {\n    return value.split(delimiter).filter((s) => s);\n  }\n\n  export function tokensToSearchString(tokens: string[], delimiter: string = ' '): string {\n    return encodeURIComponent(tokens.join(delimiter));\n  }\n\n  export function makeSearchUrl(endpoint: string, searchParams: Record<string, string>): string {\n    const queryPairs = Object.entries(searchParams);\n    if (!queryPairs.length) {\n      return endpoint;\n    }\n    return `${endpoint}${`?${queryPairs.map(([key, value]) => `${key}=${value}`).join('&')}`}`;\n  }\n\n  export function makeSimpleSearchUrl(endpoint: string, searchKey: string, tokens: string[]): string {\n    return makeSearchUrl(endpoint, { [searchKey]: tokensToSearchString(tokens) });\n  }\n\n  export function makeRedirectResponse(url: string): Response {\n    return Response.redirect(url, 302);\n  }\n}\n","import { CommandHandler } from './command-handler';\n\nexport class Commands implements CommandHandler {\n  private commandMap = new Map<string, CommandHandler>();\n\n  constructor(private fallbackHandler: CommandHandler) {}\n\n  async search(tokens: string[]): Promise<Response> {\n    const handler = this.get(tokens[0]);\n\n    if (!handler) {\n      return this.fallbackHandler.search(tokens);\n    }\n\n    return handler.search(tokens.slice(1));\n  }\n\n  get(commandString: string): CommandHandler | undefined {\n    return this.commandMap.get(commandString);\n  }\n\n  add(commandString: string, handler: CommandHandler): Commands {\n    this.commandMap.set(commandString, handler);\n    return this;\n  }\n\n  setFallback(handler: CommandHandler): Commands {\n    this.fallbackHandler = handler;\n    return this;\n  }\n}\n","import { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\nimport { Commands } from './commands';\n\nexport const DICTIONARY_COMMAND_NAME = 'dict';\n\nconst dictionaryComCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchString = Utils.tokensToSearchString(tokens, '-');\n    const searchUrl = `https://www.dictionary.com/browse/${searchString}`;\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n\nconst baiduCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSimpleSearchUrl('https://dict.baidu.com/s', 'wd', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n\nconst jishoCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchString = Utils.tokensToSearchString(tokens);\n    const searchUrl = `https://jisho.org/search/${searchString}`;\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n\nexport const dictionaryCommandHandler = new Commands(dictionaryComCommandHandler)\n  .add('en', dictionaryComCommandHandler)\n  .add('chn', baiduCommandHandler)\n  .add('jp', jishoCommandHandler);\n","import { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const DUCK_DUCK_GO_COMMAND_NAME = 'd';\n\nexport const duckDuckGoCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSimpleSearchUrl('https://www.duckduckgo.com', 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n","import { Commands } from './commands';\nimport { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const GITHUB_COMMAND_NAME = 'gh';\n\nconst GITHUB_BASE_URL = 'https://github.com/search';\nconst GITHUB_API_BASE_URL = 'https://api.github.com/search';\n\nconst defaultSearchHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSimpleSearchUrl(GITHUB_BASE_URL, 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n\nasync function makeGithubSearchHandler(resource: string, tokens: string[]): Promise<Response> {\n  if (tokens.length === 0) {\n    const searchUrl = Utils.makeSearchUrl(GITHUB_BASE_URL, { type: resource });\n    return Utils.makeRedirectResponse(searchUrl);\n  }\n\n  const searchUrl = Utils.makeSimpleSearchUrl(`${GITHUB_API_BASE_URL}/${resource}`, 'q', tokens);\n  const response = await fetch(searchUrl);\n  if (!response.ok) {\n    const body = await response.text();\n    return new Response(`[${response.status}${response.statusText ?? ` ${response.statusText}`}] GitHub API: ${body}`, {\n      status: 500,\n    });\n  }\n\n  const { items } = await response.json();\n  if (items.length === 0) {\n    return new Response(`No ${resource} found from GitHub for ${tokens.join(' ')}.`, { status: 404 });\n  }\n\n  return Utils.makeRedirectResponse(items[0].html_url);\n}\n\nexport const githubCommandHandler = new Commands(defaultSearchHandler)\n  .add('r', { search: (tokens) => makeGithubSearchHandler('repositories', tokens) })\n  .add('u', { search: (tokens) => makeGithubSearchHandler('users', tokens) });\n","import { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const GOOGLE_COMMAND_NAME = 'gg';\n\nexport const googleCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSimpleSearchUrl('https://www.google.com/search', 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n","import { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const STACK_OVERFLOW_COMMAND_NAME = 'so';\n\nexport const stackOverflowCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSimpleSearchUrl('https://stackoverflow.com/search', 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n","import { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const YOUTUBE_COMMAND_NAME = 'yt';\n\nexport const youtubeCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSimpleSearchUrl('https://www.youtube.com/results', 'search_query', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n","declare const self: ServiceWorkerGlobalScope;\nexport type {};\n\nimport { Commands } from './commands/commands';\nimport { dictionaryCommandHandler, DICTIONARY_COMMAND_NAME } from './commands/dictionary';\nimport { duckDuckGoCommandHandler, DUCK_DUCK_GO_COMMAND_NAME } from './commands/duckduckgo';\nimport { githubCommandHandler, GITHUB_COMMAND_NAME } from './commands/github';\nimport { googleCommandHandler, GOOGLE_COMMAND_NAME } from './commands/google';\nimport { stackOverflowCommandHandler, STACK_OVERFLOW_COMMAND_NAME } from './commands/stackoverflow';\nimport { youtubeCommandHandler, YOUTUBE_COMMAND_NAME } from './commands/youtube';\nimport { Utils } from './util';\n\nconst COMMANDS = new Commands(duckDuckGoCommandHandler)\n  .add(DUCK_DUCK_GO_COMMAND_NAME, duckDuckGoCommandHandler)\n  .add(GOOGLE_COMMAND_NAME, googleCommandHandler)\n  .add(GITHUB_COMMAND_NAME, githubCommandHandler)\n  .add(YOUTUBE_COMMAND_NAME, youtubeCommandHandler)\n  .add(STACK_OVERFLOW_COMMAND_NAME, stackOverflowCommandHandler)\n  .add(DICTIONARY_COMMAND_NAME, dictionaryCommandHandler);\n\nasync function getSearchResponse(searchString: string): Promise<Response> {\n  const tokens = Utils.tokenize(searchString);\n\n  return COMMANDS.search(tokens);\n}\n\nfunction setFallbackSearchHandler(altSearch: string) {\n  switch (altSearch) {\n    case 'google':\n      COMMANDS.setFallback(googleCommandHandler);\n      break;\n    case 'duckduckgo':\n      COMMANDS.setFallback(duckDuckGoCommandHandler);\n      break;\n    default:\n      break;\n  }\n}\n\nself.addEventListener('install', () => {\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    self.clients\n      .claim()\n      .then(() => {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Clients/matchAll\n        return self.clients.matchAll({ type: 'window' });\n      })\n      .then((clients) => {\n        return clients.map((client) => {\n          // Check to make sure WindowClient.navigate() is supported.\n          if ('navigate' in client) {\n            return client.navigate(client.url); // Immediately reload to perform search\n          }\n        });\n      })\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  // Fix bug when opening link in new tab\n  // https://stackoverflow.com/a/49719964\n  if (event.request.cache === 'only-if-cached' && event.request.mode !== 'same-origin') {\n    return;\n  }\n\n  const url = new URL(event.request.url);\n  const searchString = url.searchParams.get('search');\n  if (searchString == null) {\n    return;\n  }\n\n  const fallback = url.searchParams.get('fallback');\n  if (fallback) {\n    setFallbackSearchHandler(fallback);\n  }\n\n  event.respondWith(getSearchResponse(searchString));\n});\n"],"names":["Utils","fallbackHandler","commandMap","Map","search","tokens","handler","this","get","slice","commandString","add","set","setFallback","tokensToSearchString","delimiter","encodeURIComponent","join","makeSearchUrl","endpoint","searchParams","queryPairs","Object","entries","length","map","key","value","tokenize","split","filter","s","makeSimpleSearchUrl","searchKey","makeRedirectResponse","url","Response","redirect","dictionaryComCommandHandler","searchString","searchUrl","baiduCommandHandler","jishoCommandHandler","dictionaryCommandHandler","Commands","duckDuckGoCommandHandler","GITHUB_BASE_URL","makeGithubSearchHandler","resource","type","fetch","response","ok","text","body","status","statusText","json","items","html_url","githubCommandHandler","googleCommandHandler","stackOverflowCommandHandler","youtubeCommandHandler","COMMANDS","self","addEventListener","skipWaiting","event","waitUntil","clients","claim","then","matchAll","client","navigate","request","cache","mode","URL","fallback","altSearch","setFallbackSearchHandler","respondWith","getSearchResponse"],"sourceRoot":""}