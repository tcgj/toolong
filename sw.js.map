{"version":3,"file":"sw.js","mappings":"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","sources":["webpack://toolong/./src/util.ts","webpack://toolong/./src/commands/commands.ts","webpack://toolong/./src/commands/duckduckgo.ts","webpack://toolong/./src/commands/github.ts","webpack://toolong/./src/commands/google.ts","webpack://toolong/./src/index.ts"],"sourcesContent":["export namespace Utils {\n  export function tokenize(value: string): string[] {\n    return value.split(' ').filter((s) => s);\n  }\n\n  export function tokensToSearchString(tokens: string[]): string {\n    return encodeURIComponent(tokens.join(' '));\n  }\n\n  export function makeSearchUrl(endpoint: string, searchParams: Record<string, string>): string {\n    const queryPairs = Object.entries(searchParams);\n    if (!queryPairs.length) {\n      return endpoint;\n    }\n    return `${endpoint}${`?${queryPairs.map(([key, value]) => `${key}=${value}`).join('&')}`}`;\n  }\n\n  export function makeSimpleSearchUrl(endpoint: string, searchKey: string, tokens: string[]): string {\n    return makeSearchUrl(endpoint, { [searchKey]: tokensToSearchString(tokens) });\n  }\n\n  export function makeRedirectResponse(url: string): Response {\n    return Response.redirect(url, 302);\n  }\n}\n","import { CommandHandler } from './command-handler';\n\nexport class Commands {\n  private commandMap = new Map<string, CommandHandler>();\n\n  constructor(private defaultHandler: CommandHandler) {}\n\n  async search(tokens: string[]): Promise<Response> {\n    const handler = this.get(tokens[0]);\n\n    if (!handler) {\n      return this.defaultHandler.search(tokens);\n    }\n\n    return handler.search(tokens.slice(1));\n  }\n\n  get(commandString: string): CommandHandler | undefined {\n    return this.commandMap.get(commandString);\n  }\n\n  add(commandString: string, handler: CommandHandler): Commands {\n    this.commandMap.set(commandString, handler);\n    return this;\n  }\n\n  setDefault(handler: CommandHandler): Commands {\n    this.defaultHandler = handler;\n    return this;\n  }\n}\n","import { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const DUCK_DUCK_GO_COMMAND_NAME = 'd';\n\nexport const duckDuckGoCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSimpleSearchUrl('https://www.duckduckgo.com', 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n","import { Commands } from './commands';\nimport { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const GITHUB_COMMAND_NAME = 'gh';\n\nconst GITHUB_BASE_URL = 'https://github.com/search';\nconst GITHUB_API_BASE_URL = 'https://api.github.com/search';\n\nconst defaultSearchHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSimpleSearchUrl(GITHUB_BASE_URL, 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n\nasync function makeGithubSearchHandler(resource: string, tokens: string[]): Promise<Response> {\n  if (tokens.length === 0) {\n    const searchUrl = Utils.makeSearchUrl(GITHUB_BASE_URL, { type: resource });\n    return Utils.makeRedirectResponse(searchUrl);\n  }\n\n  const searchUrl = Utils.makeSimpleSearchUrl(`${GITHUB_API_BASE_URL}/${resource}`, 'q', tokens);\n  const response = await fetch(searchUrl);\n  if (!response.ok) {\n    const body = await response.text();\n    return new Response(`[${response.status}${response.statusText ?? ` ${response.statusText}`}] GitHub API: ${body}`, {\n      status: 500,\n    });\n  }\n\n  const { items } = await response.json();\n  if (items.length === 0) {\n    return new Response(`No ${resource} found from GitHub for ${tokens.join(' ')}.`, { status: 404 });\n  }\n\n  return Utils.makeRedirectResponse(items[0].html_url);\n}\n\nexport const githubCommandHandler = new Commands(defaultSearchHandler)\n  .add('r', { search: (tokens) => makeGithubSearchHandler('repositories', tokens) })\n  .add('u', { search: (tokens) => makeGithubSearchHandler('users', tokens) });\n","import { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const GOOGLE_COMMAND_NAME = 'gg';\n\nexport const googleCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSimpleSearchUrl('https://www.google.com/search', 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n","declare const self: ServiceWorkerGlobalScope;\nexport type {};\n\nimport { Commands } from './commands/commands';\nimport { duckDuckGoCommandHandler, DUCK_DUCK_GO_COMMAND_NAME } from './commands/duckduckgo';\nimport { githubCommandHandler, GITHUB_COMMAND_NAME } from './commands/github';\nimport { googleCommandHandler, GOOGLE_COMMAND_NAME } from './commands/google';\nimport { Utils } from './util';\n\nconst COMMANDS = new Commands(duckDuckGoCommandHandler)\n  .add(DUCK_DUCK_GO_COMMAND_NAME, duckDuckGoCommandHandler)\n  .add(GOOGLE_COMMAND_NAME, googleCommandHandler)\n  .add(GITHUB_COMMAND_NAME, githubCommandHandler);\n\nasync function getSearchResponse(searchString: string): Promise<Response> {\n  const decodedString = decodeURIComponent(searchString);\n  const tokens = Utils.tokenize(decodedString);\n\n  return COMMANDS.search(tokens);\n}\n\nfunction setDefaultSearchHandler(altSearch: string) {\n  switch (altSearch) {\n    case 'google':\n      COMMANDS.setDefault(googleCommandHandler);\n      break;\n    case 'duckduckgo':\n      COMMANDS.setDefault(duckDuckGoCommandHandler);\n      break;\n    default:\n      break;\n  }\n}\n\nself.addEventListener('install', () => {\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    self.clients\n      .claim()\n      .then(() => {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Clients/matchAll\n        return self.clients.matchAll({ type: 'window' });\n      })\n      .then((clients) => {\n        return clients.map((client) => {\n          // Check to make sure WindowClient.navigate() is supported.\n          if ('navigate' in client) {\n            return client.navigate(client.url); // Immediately reload to perform search\n          }\n        });\n      })\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  // Fix bug when opening link in new tab\n  // https://stackoverflow.com/a/49719964\n  if (event.request.cache === 'only-if-cached' && event.request.mode !== 'same-origin') {\n    return;\n  }\n\n  const url = new URL(event.request.url);\n  const searchString = url.searchParams.get('search');\n  if (searchString == null) {\n    return;\n  }\n\n  const altSearch = url.searchParams.get('default');\n  if (altSearch) {\n    setDefaultSearchHandler(altSearch);\n  }\n\n  event.respondWith(getSearchResponse(searchString));\n});\n"],"names":["Utils","defaultHandler","commandMap","Map","search","tokens","handler","this","get","slice","commandString","add","set","setDefault","tokensToSearchString","encodeURIComponent","join","makeSearchUrl","endpoint","searchParams","queryPairs","Object","entries","length","map","key","value","tokenize","split","filter","s","makeSimpleSearchUrl","searchKey","makeRedirectResponse","url","Response","redirect","duckDuckGoCommandHandler","searchUrl","GITHUB_BASE_URL","makeGithubSearchHandler","resource","type","fetch","response","ok","text","body","status","statusText","json","items","html_url","githubCommandHandler","Commands","googleCommandHandler","COMMANDS","self","addEventListener","skipWaiting","event","waitUntil","clients","claim","then","matchAll","client","navigate","request","cache","mode","URL","searchString","altSearch","setDefaultSearchHandler","respondWith","decodedString","decodeURIComponent","getSearchResponse"],"sourceRoot":""}