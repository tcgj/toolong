{"version":3,"file":"sw.js","mappings":"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","sources":["webpack://toolong/./src/util.ts","webpack://toolong/./src/commands/commands.ts","webpack://toolong/./src/commands/duckduckgo.ts","webpack://toolong/./src/commands/github.ts","webpack://toolong/./src/commands/google.ts","webpack://toolong/./src/index.ts"],"sourcesContent":["export namespace Utils {\n  export function tokenize(value: string): string[] {\n    return value.split(' ').filter((s) => s);\n  }\n\n  export function makeSearchUrl(endpoint: string, queryParam: string, tokens: string[]): string {\n    return `${endpoint}?${queryParam}=${encodeURIComponent(tokens.join(' '))}`;\n  }\n\n  export function makeRedirectResponse(url: string): Response {\n    return Response.redirect(url, 302);\n  }\n}\n","import { CommandHandler } from './command-handler';\n\nexport class Commands {\n  private commandMap = new Map<string, CommandHandler>();\n\n  constructor(private defaultHandler: CommandHandler) {}\n\n  async search(tokens: string[]): Promise<Response> {\n    const handler = this.get(tokens[0]);\n\n    if (!handler) {\n      return this.defaultHandler.search(tokens);\n    }\n\n    return handler.search(tokens.slice(1));\n  }\n\n  get(commandString: string): CommandHandler | undefined {\n    return this.commandMap.get(commandString);\n  }\n\n  add(commandString: string, handler: CommandHandler): Commands {\n    this.commandMap.set(commandString, handler);\n    return this;\n  }\n}\n","import { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const DUCK_DUCK_GO_COMMAND_NAME = 'd';\n\nexport const duckDuckGoCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSearchUrl('https://www.duckduckgo.com', 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n","import { Commands } from './commands';\nimport { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const GITHUB_COMMAND_NAME = 'gh';\n\nconst GITHUB_BASE_URL = 'https://github.com/search';\nconst GITHUB_API_BASE_URL = 'https://api.github.com/search';\n\nasync function makeGithubSearchHandler(resource: string, tokens: string[]): Promise<Response> {\n  const searchUrl = Utils.makeSearchUrl(`${GITHUB_API_BASE_URL}/${resource}`, 'q', tokens);\n  const response = await fetch(searchUrl);\n  if (!response.ok) {\n    const body = await response.text();\n    return new Response(`[${response.status} ${response.statusText}] GitHub API: ${body}`, { status: 500 });\n  }\n\n  const { items } = await response.json();\n  if (items.length === 0) {\n    return new Response(`No ${resource} found from GitHub for ${tokens.join(' ')}.`, { status: 404 });\n  }\n\n  return Utils.makeRedirectResponse(items[0].html_url);\n}\n\nconst defaultSearchHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSearchUrl(GITHUB_BASE_URL, 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n\nexport const githubCommandHandler = new Commands(defaultSearchHandler)\n  .add('r', { search: (tokens) => makeGithubSearchHandler('repositories', tokens) })\n  .add('u', { search: (tokens) => makeGithubSearchHandler('users', tokens) });\n","import { Utils } from '../util';\nimport { CommandHandler } from './command-handler';\n\nexport const GOOGLE_COMMAND_NAME = 'gg';\n\nexport const googleCommandHandler: CommandHandler = {\n  search: async (tokens) => {\n    const searchUrl = Utils.makeSearchUrl('https://www.google.com/search', 'q', tokens);\n    return Utils.makeRedirectResponse(searchUrl);\n  },\n};\n","declare const self: ServiceWorkerGlobalScope;\nexport type {};\n\nimport { Commands } from './commands/commands';\nimport { duckDuckGoCommandHandler } from './commands/duckduckgo';\nimport { githubCommandHandler, GITHUB_COMMAND_NAME } from './commands/github';\nimport { googleCommandHandler, GOOGLE_COMMAND_NAME } from './commands/google';\nimport { Utils } from './util';\n\nconst COMMANDS = new Commands(duckDuckGoCommandHandler)\n  .add(GOOGLE_COMMAND_NAME, googleCommandHandler)\n  .add(GITHUB_COMMAND_NAME, githubCommandHandler);\n\nasync function getSearchResponse(searchString: string): Promise<Response> {\n  const decodedString = decodeURIComponent(searchString);\n  const tokens = Utils.tokenize(decodedString);\n\n  return COMMANDS.search(tokens);\n}\n\nself.addEventListener('install', () => {\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    self.clients\n      .claim()\n      .then(() => {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Clients/matchAll\n        return self.clients.matchAll({ type: 'window' });\n      })\n      .then((clients) => {\n        return clients.map((client) => {\n          // Check to make sure WindowClient.navigate() is supported.\n          if ('navigate' in client) {\n            return client.navigate(client.url); // Immediately reload to perform search\n          }\n        });\n      })\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  // Fix bug when opening link in new tab\n  // https://stackoverflow.com/a/49719964\n  if (event.request.cache === 'only-if-cached' && event.request.mode !== 'same-origin') {\n    return;\n  }\n\n  const url = new URL(event.request.url);\n  const searchString = url.searchParams.get('search');\n  if (url.pathname !== '/toolong' || searchString == null) {\n    return;\n  }\n\n  event.respondWith(getSearchResponse(searchString));\n});\n"],"names":["Utils","defaultHandler","commandMap","Map","search","tokens","handler","this","get","slice","commandString","add","set","tokenize","value","split","filter","s","makeSearchUrl","endpoint","queryParam","encodeURIComponent","join","makeRedirectResponse","url","Response","redirect","duckDuckGoCommandHandler","searchUrl","makeGithubSearchHandler","resource","fetch","response","ok","text","body","status","statusText","json","items","length","html_url","githubCommandHandler","Commands","googleCommandHandler","COMMANDS","self","addEventListener","skipWaiting","event","waitUntil","clients","claim","then","matchAll","type","map","client","navigate","request","cache","mode","URL","searchString","searchParams","pathname","respondWith","decodedString","decodeURIComponent","getSearchResponse"],"sourceRoot":""}